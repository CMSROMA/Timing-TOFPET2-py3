#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
import time

parser = argparse.ArgumentParser(description='Acquire data for TDC calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help="Data filename (prefix)")
parser.add_argument("--time", type=float, required=True, help="Acquisition time (in seconds)")
parser.add_argument("--timePed", type=float, required=True, help="Acquisition ped time for single channel (in seconds)")
parser.add_argument("--nloops", type=int, required=True, help="Number of PHYS+PED sequences")
parser.add_argument("--sleep", type=float, required=False, default=0, help="Sleep time between loops (seconds)")
parser.add_argument("--mode", type=str, required=True, choices=["tot", "qdc"], help="Acquisition mode (ToT or QDC)")
parser.add_argument("--enable-hw-trigger", dest="hwTrigger", action="store_true", help="Enable the hardware coincidence filter")
parser.add_argument("--cfgChannels", type=str, dest="cfgChannels", required=True, help="Configuration file with list of channels")
parser.add_argument("--enabledChannels", type=str, dest="enabledChannels", default="",required=False, help="List of channels with trigger enabled. The string format is 0_1_2_3 to eanble channels CH0, CH1, CH2, CH3 accordingly to configuration file. If nothing is specified all channels in configuration file can trigger.")
parser.add_argument("--energyThr", type=str, dest="energyThr", default="", required=False, help="List of energy thresholds for enabled channels. The string format is 0_10_5_3 to set the absolute value of e thresholds for channels CH0, CH1, CH2, CH3.")
parser.add_argument("--energyThrT1", type=str, dest="energyThrT1", default="", required=False, help="List of t1 thresholds for enabled channels. The string format is 0_10_5_3 to set the absolute value of t1 thresholds for channels CH0, CH1, CH2, CH3.")

args = parser.parse_args()

################################

#The configChannels .txt file  should have lines with this format
##  ID   NHV    VBR    OV    NCHIP    NCH    VTH_1    VTH_2    VTH_E    SIPM_CODE    SIPM_TYPE     X    Y    Z    CRYSTAL
#CH 0    11     52.25  7.00  0        59     20       20       15       10579        S13360-3025CS --   --   360  LYSO_3_3_5
#CH 1    29     51.74  7.00  4        59     20       20       15       10580        S13360-3025CS --   --   170  LYSO_3_3_5
cfg = open(args.cfgChannels, "r")

channelList = {}
for line in cfg:

    #skip commented out lines or empty lines
    if (line.startswith("#")):
        continue
    if line in ['\n','\r\n']:
        continue
        
    line = line.rstrip('\n')
    splitline = line.split()
    linetype = splitline[0]
    linesize = len(splitline)

    if (linetype == "CH" and linesize==16):
        CH = splitline[1]
        NCHIP = splitline[5]
        NCH = splitline[6]
        #channelList.append( (int(CH),int(NCHIP),int(NCH)) )
        channelList[int(CH)]=(int(NCHIP),int(NCH))

cfg.close()

print("Channels in config file: ", channelList)

################################

channelsEnabled = []
energyThresholds = []
energyThresholdsT1 = []

if args.enabledChannels!="":

    channelsEnabled = args.enabledChannels.split("_")

    if args.energyThr == "":
        parser.error('Please provide the energy thresholds for the channels enabled in the trigger.')                
    if args.energyThrT1 == "":
        parser.error('Please provide the t1 thresholds for the channels enabled in the trigger.')                

    if args.energyThr != "":   
        energyThresholds = args.energyThr.split("_")
        if (len (energyThresholds) != len(channelsEnabled)):
            parser.error('Number of energy thresholds differnet from number of channels enabled in the trigger.')                
    if args.energyThrT1 != "":   
        energyThresholdsT1 = args.energyThrT1.split("_")
        if (len (energyThresholdsT1) != len(channelsEnabled)):
            parser.error('Number of t1 thresholds differnet from number of channels enabled in the trigger.')                

    print("Channels with trigger enabled: ", channelsEnabled)
    print("E thresholds: ", energyThresholds)
    print("T1 thresholds: ", energyThresholdsT1)

################################

mask = config.LOAD_ALL
if args.mode != "mixed":
        mask ^= config.LOAD_QDCMODE_MAP
systemConfig = config.ConfigFromFile(args.config, loadMask=mask)

daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_ON, hw_trigger_enable=args.hwTrigger, qdc_mode = args.mode)
qdcMode = args.mode == "qdc"
asicsConfig = daqd.getAsicsConfig()
print("asicsConfig : ", asicsConfig)

daqd.openRawAcquisition(args.fileNamePrefix)
timePhys = float(args.time/args.nloops)

for i in range(args.nloops):
    print(" --- Starting LOOP: "+str(i+1))

    ##############################################
    ############## PHYSICS EVENTS ################
    ##############################################

    #for ac in asicsConfig.values():
    for key, ac in asicsConfig.items():
        print("current asic: ", key)
        chip = key[2]
        
        #unused?
        gc = ac.globalConfig
    
        for channel, cc in enumerate(ac.channelConfig):
            #print channel
            #print cc                

            if args.enabledChannels=="":
                cc.setValue("trigger_mode_1", 0b00)
            else:
                # Disable channel from triggering.
                cc.setValue("trigger_mode_1", 0b11)

                # Will selectively enable channels below
                for ich, chEnabled in enumerate(channelsEnabled):                                
                    thischip = channelList[int(chEnabled)][0]
                    thischannel = channelList[int(chEnabled)][1]
                    if(thischip == chip and thischannel == channel):
                        #print ich
                        print("Enable trigger for CH", int(chEnabled), " , chip ", chip, " , channel", channel)
                        cc.setValue("trigger_mode_1", 0b00)                                        
                        
                        #change E threshold
                        dac_setting = systemConfig.mapAsicChannelThresholdToDAC((key[0], key[1], chip, channel), "vth_e", int(energyThresholds[ich]))
                        cc.setValue("vth_e", dac_setting)

                        #change t1 threshold
                        dac_setting = systemConfig.mapAsicChannelThresholdToDAC((key[0], key[1], chip, channel), "vth_t1", int(energyThresholdsT1[ich]))
                        cc.setValue("vth_t1", dac_setting)

                        print("Set VTH_E: ", cc.getValue("vth_e"))
                        print("Set VTH_T1: ", cc.getValue("vth_t1"))

            if not qdcMode:
                cc.setValue("qdc_mode", 0)
                cc.setValue("intg_en", 0)
                cc.setValue("intg_signal_en", 0)
            else:
                cc.setValue("qdc_mode", 1)
                cc.setValue("intg_en", 1)
                cc.setValue("intg_signal_en", 1)
   		
            #print "chip, channel, min_intg_time, max_intg_time", chip, channel, cc.getValue("min_intg_time"), cc.getValue("max_intg_time")

    daqd.setAsicsConfig(asicsConfig)
    daqd.acquire(timePhys, 0, 0);

    ##############################################
    ############## PEDESTAL EVENTS ###############
    ##############################################

    if(args.timePed==0):
        print ("No pedestal run")
        # Sleep before next loop
        print("Sleeping %f s"%args.sleep)
        time.sleep(args.sleep)
        continue

    for ac in asicsConfig.values():
        
        #unused?
        gc = ac.globalConfig

        for cc in ac.channelConfig:
            # Disable channel from triggering.
            # Will selectively enable channels below
            cc.setValue("trigger_mode_1", 0b11)
        
            if not qdcMode:
                cc.setValue("qdc_mode", 0)
                cc.setValue("intg_en", 0)
                cc.setValue("intg_signal_en", 0)
            else:
                cc.setValue("qdc_mode", 1)
                ## TO BE CHECKED
                cc.setValue("intg_en", 1)
                cc.setValue("intg_signal_en", 1)
                ##
                
    for chNumber, channel in channelList.items():
        thischip = channel[0]
        thischannel = channel[1]

        channelOK = 1
        if args.enabledChannels!="":
            channelOK = 0
        for chEnabled in channelsEnabled:
            if (int(chEnabled) == chNumber):
                channelOK = 1 #found channel
                break
        if channelOK == 0:
            continue

        #This config has all channels disabled by default. Will enable the channels one-by-one.
        cfgCopy = deepcopy(asicsConfig)
    
        for key, ac in cfgCopy.items():
        
            print(key, ac)
            chip = key[2]
            if (chip == thischip):

                #Scan test pulse phase
                for phase in [0.0/3, 1.0/3, 2.0/3]:
                #for phase in [0.0]:
                
                    print("Enable test pulse for chip ", chip, " , channel", thischannel)
                    ac.channelConfig[thischannel].setValue("trigger_mode_1", 0b01)

                    #Set Test Pulse 2000000 ~ 100 Hz, 200000 ~ 1 kHz 
                    print("TestPulse PLL phase: ", phase)
                    daqd.setTestPulsePLL(200, 10000, phase, False)

                    #update config
                    daqd.setAsicsConfig(cfgCopy)

                    #start daq
                    daqd.acquire(args.timePed, 1, 0);

                    #update config (disable again the current channel)
                    ac.channelConfig[thischannel].setValue("trigger_mode_1", 0b11)
                    daqd.setAsicsConfig(cfgCopy)

    # Sleep before next loop
    print("Sleeping %f s"%args.sleep)
    time.sleep(args.sleep)


systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)
